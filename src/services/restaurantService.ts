// src/services/restaurantService.ts

import { database } from '../config/firebaseConfig'; // Adjust path to your Firebase config
import firebase from 'firebase/compat/app'; // For types like firebase.database.Reference
import {
  Restaurant,
  MenuCategory,
  MenuItem,
  TableOrder,
  RestaurantOrder,
  RestaurantIdParam,
  RestaurantMenuCategoryPathKeys,
  RestaurantMenuItemPathKeys,
  RestaurantTablePathKeys,
  RestaurantTableOrderPathKeys,
} from '../types/restaurant.types'; // Assuming types are in this path

const RESTAURANTS_PATH = "/restaurants";

class RestaurantDataService {
  private db: firebase.database.Reference;

  constructor() {
    this.db = database.ref(RESTAURANTS_PATH);
  }

  /**
   * Gets a Firebase reference to all restaurants.
   * Used for listeners or fetching all data.
   */
  getAll(): firebase.database.Reference {
    return this.db;
  }

  /**
   * Gets a Firebase reference to a specific restaurant by its ID.
   */
  get(id: string): firebase.database.Reference {
    return this.db.child(id);
  }

  /**
   * Creates a new restaurant.
   * @param restaurant - The restaurant data (without an id, Firebase will generate one).
   * @returns A promise that resolves to the new restaurant's Firebase reference.
   */
  create(restaurant: Omit<Restaurant, 'id'>): Promise<firebase.database.Reference> {
    const newRef = this.db.push();
    // Firebase's push().key can be used if you need the ID before setting,
    // but set().then() returning the ref is also common.
    return newRef.set(restaurant).then(() => newRef);
  }

  /**
   * Updates an existing restaurant.
   * @param key - The ID of the restaurant to update.
   * @param value - An object containing the properties to update.
   */
  update(key: string, value: Partial<Restaurant>): Promise<void> {
    return this.db.child(key).update(value);
  }

  /**
   * Deletes a restaurant by its ID.
   */
  delete(key: string): Promise<void> {
    return this.db.child(key).remove();
  }

  /**
   * Deletes all restaurants. Use with caution!
   */
  deleteAll(): Promise<void> {
    return this.db.remove();
  }

  // --- Menu Category Methods ---
  // Path: restaurants/{restaurantId}/menu/{menuCategoryId}

  /**
   * Gets a Firebase reference to a specific menu category within a restaurant.
   */
  getRestaurantMenuCategory(keys: RestaurantMenuCategoryPathKeys): firebase.database.Reference {
    return this.db.child(keys.id).child('menu').child(keys.menuCategoryId);
  }

  /**
   * Adds a new menu category to a restaurant.
   * The ID for the new category will be generated by Firebase.
   * @param keys - Contains restaurant ID.
   * @param value - The menu category data (without an id).
   */
  addRestaurantMenuCategory(keys: RestaurantIdParam, value: Omit<MenuCategory, 'id'>): Promise<firebase.database.Reference> {
    const newRef = this.db.child(keys.id).child('menu').push();
    return newRef.set(value).then(() => newRef);
  }

  /**
   * Edits an existing menu category in a restaurant.
   */
  editRestaurantMenuCategory(keys: RestaurantMenuCategoryPathKeys, value: Partial<MenuCategory>): Promise<void> {
    return this.db.child(keys.id).child('menu').child(keys.menuCategoryId).update(value);
  }

  /**
   * Deletes a menu category from a restaurant.
   */
  deleteRestaurantMenuCategory(keys: RestaurantMenuCategoryPathKeys): Promise<void> {
    return this.db.child(keys.id).child('menu').child(keys.menuCategoryId).remove();
  }

  // --- Menu Item Methods ---
  // Path: restaurants/{restaurantId}/menu/{menuCategoryId}/subCategories/{subCategoryId}/products/{menuItemId}

  /**
   * Adds a new menu item to a specific sub-category within a menu category.
   * The ID for the new menu item will be generated by Firebase.
   */
  addRestaurantMenuItem(
    keys: Omit<RestaurantMenuItemPathKeys, 'menuItemId'>, // menuItemId will be generated by push()
    value: Omit<MenuItem, 'id'>
  ): Promise<firebase.database.Reference> {
    const newRef = this.db
      .child(keys.id)
      .child('menu')
      .child(keys.menuCategoryId)
      .child('subCategories') // As per RestaurantMenuCategory type
      .child(keys.subCategoryId)
      .child('products')
      .push();
    return newRef.set(value).then(() => newRef);
  }

  /**
   * Gets a Firebase reference to a specific menu item.
   */
  getRestaurantMenuItem(keys: RestaurantMenuItemPathKeys): firebase.database.Reference {
    return this.db
      .child(keys.id)
      .child('menu')
      .child(keys.menuCategoryId)
      .child('subCategories')
      .child(keys.subCategoryId)
      .child('products')
      .child(keys.menuItemId);
  }

  /**
   * Edits an existing menu item.
   */
  editRestaurantMenuItem(keys: RestaurantMenuItemPathKeys, value: Partial<MenuItem>): Promise<void> {
    return this.db
      .child(keys.id)
      .child('menu')
      .child(keys.menuCategoryId)
      .child('subCategories')
      .child(keys.subCategoryId)
      .child('products')
      .child(keys.menuItemId)
      .update(value);
  }

  /**
   * Deletes a menu item.
   */
  deleteRestaurantMenuItem(keys: RestaurantMenuItemPathKeys): Promise<void> {
    return this.db
      .child(keys.id)
      .child('menu')
      .child(keys.menuCategoryId)
      .child('subCategories')
      .child(keys.subCategoryId)
      .child('products')
      .child(keys.menuItemId)
      .remove();
  }

  // --- Table Order Methods ---
  // Path: restaurants/{restaurantId}/tables/{tableId}/orders/{orderId}

  /**
   * Adds an order to a specific table in a restaurant.
   * The ID for the new order will be generated by Firebase.
   */
  addOrderToTable(keys: RestaurantTablePathKeys, value: Omit<TableOrder, 'id'>): Promise<firebase.database.Reference> {
    // Original service used `keys.table`. Types use `keys.tableId`. Using `keys.tableId`.
    const newRef = this.db.child(keys.id).child('tables').child(keys.tableId).child('orders').push();
    return newRef.set(value).then(() => newRef);
  }

  /**
   * Gets a Firebase reference to all orders for a specific table.
   */
  getTableOrders(keys: RestaurantTablePathKeys): firebase.database.Reference {
    // Original service used `keys.table`. Types use `keys.tableId`. Using `keys.tableId`.
    return this.db.child(keys.id).child('tables').child(keys.tableId).child('orders');
  }

  /**
   * Updates a specific order at a table.
   */
  updateTableOrder(keys: RestaurantTableOrderPathKeys, value: Partial<TableOrder>): Promise<void> {
    return this.db.child(keys.id).child('tables').child(keys.tableId).child('orders').child(keys.orderId).update(value);
  }

  /**
   * Clears/deletes all orders from a specific table.
   */
  clearTableOrders(keys: RestaurantTablePathKeys): Promise<void> {
    // Original service used `keys.table`. Types use `keys.tableId`. Using `keys.tableId`.
    return this.db.child(keys.id).child('tables').child(keys.tableId).child('orders').remove();
  }

  // --- Restaurant-Level Order Methods ---
  // Path: restaurants/{restaurantId}/orders/{orderId}

  /**
   * Adds an order directly to the restaurant's main order log.
   * The ID for the new order will be generated by Firebase.
   */
  addOrderToRestaurant(keys: RestaurantIdParam, value: Omit<RestaurantOrder, 'id'>): Promise<firebase.database.Reference> {
    const newRef = this.db.child(keys.id).child('orders').push();
    return newRef.set(value).then(() => newRef);
  }

  /**
   * Gets restaurant orders within a specific date range, ordered by 'tableClearTimestamp'.
   * @param keys - Contains restaurant ID.
   * @param startDateInput - Start date (string, number, or Date object).
   * @param endDateInput - End date (string, number, or Date object).
   * @returns A Firebase Query object.
   */
  getOrdersFromRestaurant(
    keys: RestaurantIdParam,
    startDateInput: string | number | Date,
    endDateInput: string | number | Date
  ): firebase.database.Query {
    // Ensure inputs are treated as Dates and set to start/end of day for timestamp conversion
    const startDate = new Date(startDateInput);
    startDate.setHours(0, 0, 0, 0); // Set to the beginning of the day
    const startTimestamp = startDate.getTime();

    const endDate = new Date(endDateInput);
    endDate.setHours(23, 59, 59, 999); // Set to the end of the day
    const endTimestamp = endDate.getTime();

    // Assuming 'tableClearTimestamp' is the field to order/filter by.
    // If it's 'orderTimestamp', change 'orderByChild' accordingly.
    return this.db.child(keys.id).child('orders').orderByChild('tableClearTimestamp').startAt(startTimestamp).endAt(endTimestamp);
  }
}

// Export a singleton instance of the service
export default new RestaurantDataService();
